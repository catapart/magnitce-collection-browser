var d=`\r
\r
:host\r
{\r
    display: inline-flex;\r
    width: 80px;\r
    height: 80px;\r
    color-scheme: light dark;\r
}\r
\r
:host(:focus) figure\r
{\r
    border-color: rgb(205 205 205);\r
}\r
@media (prefers-color-scheme: dark) \r
{\r
    :host(:focus) figure\r
    {\r
        border-color: rgb(81 81 81);\r
    }\r
}\r
\r
figure\r
{\r
    flex: 1;\r
    display: grid;\r
    grid-template-rows: 1fr auto;\r
    margin: 0;\r
    padding: 0;\r
    border: solid 1px transparent;\r
}\r
:host(.selected) figure\r
{\r
    border-color: inherit;\r
}\r
\r
#selected\r
,::slotted([slot="selected"])\r
{\r
    grid-column: 1;\r
    grid-row: 1;\r
\r
    justify-self: flex-start;\r
    align-self: flex-start;\r
    z-index: 2;\r
\r
    opacity: 0;\r
    transition: opacity 200ms ease;\r
}\r
\r
:host(:not([select],[selectable])) #selected\r
,:host(:not([select],[selectable])) ::slotted([slot="selected"])\r
{\r
    display: none;\r
    pointer-events: none;\r
}\r
\r
#edit-button\r
,::slotted([slot="edit-button"])\r
{\r
    grid-column: 1;\r
    grid-row: 1;\r
\r
    justify-self: flex-end;\r
    align-self: flex-start;\r
    z-index: 2;\r
\r
    opacity: 0;\r
    transition: opacity 200ms ease;\r
}\r
\r
:host(:not([edit],[editable])) #edit-button\r
,:host(:not([edit],[editable])) ::slotted([slot="edit-button"])\r
{\r
    display: none;\r
    pointer-events: none;\r
}\r
\r
.icon\r
,::slotted([slot="icon"])\r
{\r
    grid-column: 1;\r
    grid-row: 1;\r
\r
    justify-self: center;\r
    align-self: center;\r
\r
    width: var(--icon-width, var(--icon-size));\r
    margin: .25em;\r
}\r
#image-icon\r
,::slotted(img[slot="icon"])\r
{\r
    display: block;\r
    max-width: 100%;\r
    min-width: 0;\r
    max-height: 100%;\r
    min-height: 0;\r
}\r
#text-icon\r
{\r
    font-size: 36px;\r
    line-height: 1;\r
    margin: 0;\r
    padding: 0;\r
    box-sizing: border-box;\r
}\r
\r
:host(:not([src])) #image-icon\r
,:host([src]) #text-icon\r
{\r
    display: none;\r
}\r
\r
#caption\r
,::slotted([slot="caption"])\r
{\r
    text-align: center;\r
    text-overflow: ellipsis;\r
    overflow: hidden;\r
}\r
\r
:host(:not([select],[selectable]):hover)  #edit-button\r
,:host(:not([select],[selectable]):hover) ::slotted([slot="edit-button"])\r
,:host(:focus)  #edit-button\r
,:host(:focus) ::slotted([slot="edit-button"])\r
,figure:has(:checked) #edit-button\r
,figure:has(:checked) ::slotted([slot="edit-button"])\r
,figure:has(:focus) #edit-button\r
,figure:has(:focus) ::slotted([slot="edit-button"])\r
,figure:has(:focus-within) #edit-button\r
,figure:has(:focus-within) ::slotted([slot="edit-button"])\r
{ \r
    opacity: 1;\r
}\r
\r
\r
:host(:hover) #selected\r
,figure:has(:checked) #selected\r
,figure:focus #selected\r
,figure:focus-within #selected\r
{ \r
    opacity: 1;\r
}`;var c=`<figure id="figure">\r
    <slot name="selected"><input type="checkbox" id="selected" /></slot>\r
    <slot name="edit-button"><button type="button" id="edit-button">&#9998;</button></slot>\r
    <slot name="icon">\r
        <span id="text-icon" class="icon">\u{1F5CE}</span>\r
        <img id="image-icon" class="icon" />\r
    </slot>\r
    <slot name="caption"><figcaption id="caption"><slot>Item</slot></figcaption></slot>\r
</figure>`;var g=["Space","Enter"],r=new CSSStyleSheet;r.replaceSync(d);var a="captioned-thumbnail",l=class h extends HTMLElement{componentParts=new Map;getElement(t){if(this.componentParts.get(t)==null){let e=this.findElement(t);e!=null&&this.componentParts.set(t,e)}return this.componentParts.get(t)}findElement(t){return this.shadowRoot.getElementById(t)}static selectedClassName="selected";get isSelected(){return this.hasAttribute("aria-selected")}set isSelected(t){t==!0?this.#e():this.#s()}constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML=c,this.shadowRoot.adoptedStyleSheets.push(r),this.#i(),this.#t(),this.addEventListener("click",this.#n.bind(this)),this.addEventListener("keydown",this.#l.bind(this)),this.shadowRoot.querySelector("slot:not([name])").addEventListener("slotchange",this.#o.bind(this));let t=this.findElement("selected");t?.addEventListener("input",this.#d.bind(this))}#i(){let t=[...this.shadowRoot.querySelectorAll("[id]")];for(let s=0;s<t.length;s++)t[s].part.add(t[s].id);let e=[...this.shadowRoot.querySelectorAll("[class]")];for(let s=0;s<e.length;s++)e[s].part.add(...e[s].classList)}#o(t){this.#t()}#n(t){let e=t.composedPath().find(n=>n instanceof HTMLElement&&(n.id=="edit-button"||n.getAttribute("slot")=="edit-button"));if(e!=null){this.dispatchEvent(new CustomEvent("edit",{detail:{button:e,item:this},bubbles:!0,composed:!0})),t.stopPropagation();return}if(this.getAttribute("select")??this.getAttribute("selectable")==null)return;let o=t.composedPath().find(n=>n instanceof HTMLInputElement&&(n.id=="selected"||n.getAttribute("slot")=="selected"))==null?"click":"input",i=t;this.dispatchEvent(new CustomEvent("change",{bubbles:!0,composed:!0,cancelable:!0,detail:{shiftKey:i.shiftKey,ctrlKey:i.ctrlKey,method:o}}))!=!1&&this.toggleSelection()}#l(t){if(this.shadowRoot.activeElement==this.findElement("figure")&&g.indexOf(t.code)!=-1){if(t.preventDefault(),this.dispatchEvent(new CustomEvent("change",{bubbles:!0,composed:!0,cancelable:!0,detail:{method:t.code}}))==!1)return;this.toggleSelection()}}#d(t){t.preventDefault(),t.stopPropagation(),this.isSelected=t.target.checked}#t(){let t="";for(let e=0;e<this.childNodes.length;e++){let s=this.childNodes[e];if(s.nodeType==Node.TEXT_NODE){let o=s.textContent?.trim()??"";o!=""&&(t+=o)}}t.trim()==""&&(t=this.findElement("caption").textContent),this.title=t}#e(){(this.getAttribute("select")??this.getAttribute("selectable")==null)||this.setAttribute("aria-selected","option")}#s(){this.removeAttribute("aria-selected")}toggleSelection(){this.isSelected==!0?this.#s():this.#e()}#c(){let t=this.isSelected,e=this.findElement("selected");e!=null&&(e.checked=this.isSelected),this.classList.toggle(h.selectedClassName,t)}updateImage(t){let e=this.findElement("image-icon");e.src=t}static observedAttributes=["label","src","select","selectable","aria-selected"];attributeChangedCallback(t,e,s){if(t=="label"){let o=Array.from(this.childNodes).filter(i=>i.nodeType==Node.TEXT_NODE);for(let i=0;i<o.length;i++)o[i].remove();this.append(s),this.#t()}else t=="src"?this.updateImage(s):t=="select"||t=="selectable"?this.findElement("figure").tabIndex=0:t=="aria-selected"&&this.#c()}};customElements.get(a)==null&&customElements.define(a,l);export{l as CaptionedThumbnailElement};
